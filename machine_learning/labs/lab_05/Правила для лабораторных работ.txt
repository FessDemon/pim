При выполнении лабораторных работ старайтесь:
- сначала разобраться с теорией. Даже идеально выполненную лабораторную работу не получится сдать, если не понимать теоретический материал, лежащий в её основе. Если есть вопросы - обязательно задайте их на лекции или на практике;
- писать "чистый" код: желательно придерживаться PEP8 (https://peps.python.org/pep-0008/) (русский перевод (https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html));
- понятно и логично именовать переменные и функции (разумно ориентироваться на именование, принятое в scikit-learn (https://scikit-learn.org), - самой популярной библиотеке классического машинного обучения);
- избегать дублирования кода (например, если в программе некоторое действие повторяется, надо подумать, а не стоит ли записать его в виде функции);
- всегда сопровождать код подробными комментариями;
- по возможности использовать матрично-векторные операции Python и numpy вместо циклов;
- внимательно следить за размерностями структур данных;
- использовать возможности Jupyter Notebook по выполнению отдельных строк кода - сначала желательно пройтись отдельно по действиям некоторой сложной операции, а затем уже записывать их в функцию;
- представлять результаты в легко понятной форме (представьте, что вы общаетесь с Заказчиком, который не понимает, что такое машинное обучение). Например, если необходимо проверить совпадение двух значений, выпишите их друг под другом, а ещё лучше - дополнительно сделать вычитание одного из другого;
- использовать f-строки;
- сопровождать вывод указанием того, что именно вы сейчас выводите;
- перепроверять себя, выводя промежуточные результаты;
- на графиках подписывать оси, добавлять название графика и легенду;
- если по заданию требуется сделать вывод, записывать его в отдельную текстовую ячейку;
- пользоваться Markdown (https://tmp-wiki.readthedocs.io/ru/master/terms/markdown/)-разметкой;
- при полном запуске ноутбука все ячейки кода должны отработать корректно.